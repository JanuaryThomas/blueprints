{{$app := .AppName | kebabcase}}
{{$clusterName := .ClusterName | kebabcase}}
{{$appEnv := printf "gcp-gke-%s" $clusterName}}
apiVersion: xl-release/v1
kind: Templates
spec:
- name: {{$app}}
  type: xlrelease.Folder
  children:
  - name: {{$app}}-ci-cd
    type: xlrelease.Release
    description: |
      This XL Release template shows how to deploy an application, based on microservices architecture, to GCP GKE using XL Deploy and Terraform.
    tags:
    - GCP
    - GKE
    - Terraform
    - {{$app}}
    scriptUsername: !value XL_RELEASE_USERNAME
    scriptUserPassword: !value XL_RELEASE_PASSWORD
    variables:
    - key: control
      type: xlrelease.MapStringStringVariable
      requiresValue: false
      showOnReleaseStart: false
      value:
        namespace: {{.Namespace}}
        serviceName: nginx
    - key: lbHostnameOrIp
      type: xlrelease.StringVariable
      requiresValue: false
      showOnReleaseStart: false
    - key: xld-admin-password
      type: xlrelease.PasswordStringVariable
      requiresValue: true
      showOnReleaseStart: false
      value: !value XL_DEPLOY_PASSWORD
    phases:
    # Provision Infra
    - name: Provision Infrastructure
      color: '#ff9e3b'
      type: xlrelease.Phase
      tasks:
      - name: Provision GCP GKE cluster
        type: xldeploy.Deploy
        server: XL Deploy
        deploymentPackage: {{$app}}/GKE-TERRAFORM/{{$app}}-terraform-gke/1.0.0
        deploymentEnvironment: Environments/{{$app}}/gcp-terraform
    - name: Deploy {{$app}} application
      type: xlrelease.Phase
      tasks:
      - name: Deploy {{.Namespace}} namespace
        type: xldeploy.Deploy
        server: XL Deploy
        deploymentPackage: {{$app}}/K8S/{{$app}}-namespace/1.0.0
        deploymentEnvironment: Environments/{{$app}}/gke-env
      - name: Deploy app svc
        type: xldeploy.Deploy
        server: XL Deploy
        deploymentPackage: {{$app}}/K8S/{{$app}}-k8s-app/1.0.0
        deploymentEnvironment: Environments/{{$app}}/gke-env
    - name: Test
      type: xlrelease.Phase
      tasks:
      - name: Get Store service public URL
        type: xlrelease.SequentialGroup
        tasks:
        - name: Get Store k8s service specs
          type: xldeploy.Controltask
          server: XL Deploy
          numberOfContinueRetrials: 100
          pollingInterval: 10
          continueIfStepFails: true
          ciId: Infrastructure/{{$app}}/gke-{{$clusterName}}-cluster-GKECluster
          taskName: describeService
          variableMapping:
            pythonScript.xlDeployTaskId: ${taskId}
            pythonScript.parameters: ${control}
        - name: Parse Store k8s service
          type: webhook.XmlWebhook
          URL: {{.XLDUrlForXLR}}/deployit/tasks/v2/export
          method: GET
          username: !value XL_DEPLOY_USERNAME
          xPathExpression: "/list/task[@id=\"${taskId}\"]//log/text()"
          variableMapping:
            pythonScript.result: ${taskOutput}
            pythonScript.password: ${xld-admin-password}
        - name: Get Store k8s service ip or hostname
          type: xlrelease.ScriptTask
          script: |
            import re
            m = re.search('hostname:(.*)\nip:([0-9.]+|None)', releaseVariables['taskOutput'])
            ipHostname = [m.group(1),m.group(2)]
            for item in ipHostname:
                if "None" not in item:
                    releaseVariables['lbHostnameOrIp'] = item
          # end of script
      - name: Check {{$app}} application status
        type: xlrelease.ScriptTask
        script: |
          import urllib2
          import json
          import time

          time.sleep(60)
          instances_url = 'http://${lbHostnameOrIp}'
          values = {}

          def make_req(url):
              req = urllib2.Request(url, None, headers={'Accept': 'text/html'})
              opener = urllib2.build_opener()
              response = opener.open(req)
              return response.getcode()

          resp_code = make_req(instances_url)
          if resp_code == 200:
              print "Service is deployed"
          else:
              print "Service not deployed. Response code = {0}\n".format(resp_code)
              exit(1)
        # end of script
      - name: Verify application
        type: xlrelease.GateTask
        team: Release Admin
        description: |
          The {{$app}} app is now live on GKE!
          Check out the web site and complete this task when done.

          URL => http://${lbHostnameOrIp}